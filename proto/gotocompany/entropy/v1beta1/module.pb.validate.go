// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gotocompany/entropy/v1beta1/module.proto

package entropyv1beta1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Module) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Module with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ModuleMultiError, or nil if none found.
func (m *Module) ValidateAll() error {
	return m.validate(true)
}

func (m *Module) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Urn

	// no validation rules for Name

	// no validation rules for Project

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModuleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModuleValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModuleValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModuleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModuleValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModuleValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetConfigs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModuleValidationError{
					field:  "Configs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModuleValidationError{
					field:  "Configs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfigs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModuleValidationError{
				field:  "Configs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModuleMultiError(errors)
	}
	return nil
}

// ModuleMultiError is an error wrapping multiple validation errors returned by
// Module.ValidateAll() if the designated constraints aren't met.
type ModuleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModuleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModuleMultiError) AllErrors() []error { return m }

// ModuleValidationError is the validation error returned by Module.Validate if
// the designated constraints aren't met.
type ModuleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModuleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModuleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModuleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModuleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModuleValidationError) ErrorName() string { return "ModuleValidationError" }

// Error satisfies the builtin error interface
func (e ModuleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModule.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModuleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModuleValidationError{}

// Validate checks the field values on ListModulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModulesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModulesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModulesRequestMultiError, or nil if none found.
func (m *ListModulesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModulesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Project

	if len(errors) > 0 {
		return ListModulesRequestMultiError(errors)
	}
	return nil
}

// ListModulesRequestMultiError is an error wrapping multiple validation errors
// returned by ListModulesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListModulesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModulesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModulesRequestMultiError) AllErrors() []error { return m }

// ListModulesRequestValidationError is the validation error returned by
// ListModulesRequest.Validate if the designated constraints aren't met.
type ListModulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModulesRequestValidationError) ErrorName() string {
	return "ListModulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListModulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModulesRequestValidationError{}

// Validate checks the field values on ListModulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListModulesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListModulesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListModulesResponseMultiError, or nil if none found.
func (m *ListModulesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListModulesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetModules() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListModulesResponseValidationError{
						field:  fmt.Sprintf("Modules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListModulesResponseValidationError{
						field:  fmt.Sprintf("Modules[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListModulesResponseValidationError{
					field:  fmt.Sprintf("Modules[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListModulesResponseMultiError(errors)
	}
	return nil
}

// ListModulesResponseMultiError is an error wrapping multiple validation
// errors returned by ListModulesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListModulesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListModulesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListModulesResponseMultiError) AllErrors() []error { return m }

// ListModulesResponseValidationError is the validation error returned by
// ListModulesResponse.Validate if the designated constraints aren't met.
type ListModulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListModulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListModulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListModulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListModulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListModulesResponseValidationError) ErrorName() string {
	return "ListModulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListModulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListModulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListModulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListModulesResponseValidationError{}

// Validate checks the field values on GetModuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModuleRequestMultiError, or nil if none found.
func (m *GetModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Urn

	if len(errors) > 0 {
		return GetModuleRequestMultiError(errors)
	}
	return nil
}

// GetModuleRequestMultiError is an error wrapping multiple validation errors
// returned by GetModuleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModuleRequestMultiError) AllErrors() []error { return m }

// GetModuleRequestValidationError is the validation error returned by
// GetModuleRequest.Validate if the designated constraints aren't met.
type GetModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModuleRequestValidationError) ErrorName() string { return "GetModuleRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModuleRequestValidationError{}

// Validate checks the field values on GetModuleResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetModuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModuleResponseMultiError, or nil if none found.
func (m *GetModuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetModuleResponseValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetModuleResponseValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetModuleResponseValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetModuleResponseMultiError(errors)
	}
	return nil
}

// GetModuleResponseMultiError is an error wrapping multiple validation errors
// returned by GetModuleResponse.ValidateAll() if the designated constraints
// aren't met.
type GetModuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModuleResponseMultiError) AllErrors() []error { return m }

// GetModuleResponseValidationError is the validation error returned by
// GetModuleResponse.Validate if the designated constraints aren't met.
type GetModuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModuleResponseValidationError) ErrorName() string {
	return "GetModuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetModuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModuleResponseValidationError{}

// Validate checks the field values on CreateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateModuleRequestMultiError, or nil if none found.
func (m *CreateModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateModuleRequestValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateModuleRequestValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateModuleRequestValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateModuleRequestMultiError(errors)
	}
	return nil
}

// CreateModuleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateModuleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateModuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateModuleRequestMultiError) AllErrors() []error { return m }

// CreateModuleRequestValidationError is the validation error returned by
// CreateModuleRequest.Validate if the designated constraints aren't met.
type CreateModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateModuleRequestValidationError) ErrorName() string {
	return "CreateModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateModuleRequestValidationError{}

// Validate checks the field values on CreateModuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateModuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateModuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateModuleResponseMultiError, or nil if none found.
func (m *CreateModuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateModuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateModuleResponseValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateModuleResponseValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateModuleResponseValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateModuleResponseMultiError(errors)
	}
	return nil
}

// CreateModuleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateModuleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateModuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateModuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateModuleResponseMultiError) AllErrors() []error { return m }

// CreateModuleResponseValidationError is the validation error returned by
// CreateModuleResponse.Validate if the designated constraints aren't met.
type CreateModuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateModuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateModuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateModuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateModuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateModuleResponseValidationError) ErrorName() string {
	return "CreateModuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateModuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateModuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateModuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateModuleResponseValidationError{}

// Validate checks the field values on UpdateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateModuleRequestMultiError, or nil if none found.
func (m *UpdateModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Urn

	if all {
		switch v := interface{}(m.GetConfigs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateModuleRequestValidationError{
					field:  "Configs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateModuleRequestValidationError{
					field:  "Configs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfigs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateModuleRequestValidationError{
				field:  "Configs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateModuleRequestMultiError(errors)
	}
	return nil
}

// UpdateModuleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateModuleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateModuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateModuleRequestMultiError) AllErrors() []error { return m }

// UpdateModuleRequestValidationError is the validation error returned by
// UpdateModuleRequest.Validate if the designated constraints aren't met.
type UpdateModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateModuleRequestValidationError) ErrorName() string {
	return "UpdateModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateModuleRequestValidationError{}

// Validate checks the field values on UpdateModuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateModuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateModuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateModuleResponseMultiError, or nil if none found.
func (m *UpdateModuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateModuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetModule()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateModuleResponseValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateModuleResponseValidationError{
					field:  "Module",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModule()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateModuleResponseValidationError{
				field:  "Module",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateModuleResponseMultiError(errors)
	}
	return nil
}

// UpdateModuleResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateModuleResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateModuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateModuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateModuleResponseMultiError) AllErrors() []error { return m }

// UpdateModuleResponseValidationError is the validation error returned by
// UpdateModuleResponse.Validate if the designated constraints aren't met.
type UpdateModuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateModuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateModuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateModuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateModuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateModuleResponseValidationError) ErrorName() string {
	return "UpdateModuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateModuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateModuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateModuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateModuleResponseValidationError{}

// Validate checks the field values on DeleteModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteModuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteModuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteModuleRequestMultiError, or nil if none found.
func (m *DeleteModuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteModuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Urn

	if len(errors) > 0 {
		return DeleteModuleRequestMultiError(errors)
	}
	return nil
}

// DeleteModuleRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteModuleRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteModuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteModuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteModuleRequestMultiError) AllErrors() []error { return m }

// DeleteModuleRequestValidationError is the validation error returned by
// DeleteModuleRequest.Validate if the designated constraints aren't met.
type DeleteModuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteModuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteModuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteModuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteModuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteModuleRequestValidationError) ErrorName() string {
	return "DeleteModuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteModuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteModuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteModuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteModuleRequestValidationError{}

// Validate checks the field values on DeleteModuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteModuleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteModuleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteModuleResponseMultiError, or nil if none found.
func (m *DeleteModuleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteModuleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteModuleResponseMultiError(errors)
	}
	return nil
}

// DeleteModuleResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteModuleResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteModuleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteModuleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteModuleResponseMultiError) AllErrors() []error { return m }

// DeleteModuleResponseValidationError is the validation error returned by
// DeleteModuleResponse.Validate if the designated constraints aren't met.
type DeleteModuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteModuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteModuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteModuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteModuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteModuleResponseValidationError) ErrorName() string {
	return "DeleteModuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteModuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteModuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteModuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteModuleResponseValidationError{}
